<?php
/**
 * @file Contains PDF creation functions based on TCPDF.
 * Also contatins Schema validation funcitons
 */

define('CFDR_VALID', 1);
define('CFDR_INVALID', 0);
define('CFDR_IND', -1);
// the date July 1st, 2012 at start of day (midnight) in GMT-5 (Mexico daylight saving)
// is the date cfd v2.0 and v3.0 must change to version x.2
define('CFD_VERSION_2012', 1341118800);

/**
 * Makes a PDF based on 2 XSL Template files (located in resources/cfd_*.xsl)
 * one for header, one for content and also uses SAT provided file: cadenaoriginal_2_0.xslt
 * Uses FEpdf class to define the header and footer (located in reources/FEpdf.php)
 * Custom code to word-wrap the 'cadena original' using | instead of spaces.
 * @param mixed $xml The xml string or .xml file of the CFD to convert to PDF
 * @return a TCPDF object of the converted CFD
 **/
function cfd_make_pdf($xml) {
  require_once libraries_get_path('tcpdf') . '/tcpdf.php';
  require_once drupal_get_path('module', 'cfd') . '/resources/FEpdf.php';
  //Apply XSLT
  $doc = new DOMDocument();
  //load xml data string or filename
  if (is_file($xml))
    $doc->load($xml, LIBXML_NOWARNING);
  else
    $doc->loadXML($xml);

  //Content
  $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/cfd_content.xsl';
  $xsl_content = new DOMDocument(); $xsl_content->load($xsl_content_file);
  $xsl = new XSLTProcessor(); $xsl->importStylesheet($xsl_content);
  $xsl->registerPHPFunctions('number_format');
  $html_content = $xsl->transformToXml($doc);
  //"cadena original" or cado
  $xsl_cado_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_2_0.xslt';
  $xsl_cado = new DOMDocument(); $xsl_cado->load($xsl_cado_file);
  // hide warnings in @...importStylesheet because it complains about xslt version 2.0
  $xsl = new XSLTProcessor(); @$xsl->importStylesheet($xsl_cado);
  $cadena_original = $xsl->transformToXml($doc);

  //generate PDF
  $pdf = new FEpdf();
  $pdf->SetMargins(10, 10, 10, TRUE);
  //Header (in FEpdf.php)
  $pdf->registerHeader($doc);
  $pdf->AddPage();

  $pdf->writeHTML($html_content.'<br />');

  //Cadena Original with word wrapping in |
  $pdf->SetY($pdf->getY() - 7);
  $pdf->SetFontSize(10);
  $pdf->writeHTML('<strong>Cadena Original</strong>');
  $pdf->SetFontSize(8);
  //word wrapping
  $cado = explode('|', substr($cadena_original, 2, -2));
  $pdf->SetCellPadding(0);
  $pdf->Write(0, '||');
  $margins = $pdf->getMargins();
  $line_width = $pdf->getPageWidth() - $margins['left'] - $margins['right'];
  $space_left = $line_width -  $pdf->GetStringWidth('||');
  $totalwords = count($cado);
  $i = 0;
  foreach ($cado as $word) {
    //if we are on the last word
    if ($i < $totalwords - 1) {
      $word_width = $pdf->GetStringWidth($word . '|');
    }
    else {
      $word_width = $pdf->GetStringWidth($word . '||');
    }

    if ($word_width > $space_left) {
      $space_left = $line_width - $word_width;
      $pdf->Ln();
    }
    else {
      $space_left -= $word_width;
    }
    $pdf->Write(0, $word . '|');
    $i++;
  }
  $pdf->Write(0, '|');
  $pdf->SetCreator("Drupal-CFD module with " . PDF_CREATOR);
  $pdf->SetAuthor(variable_get('site_name', 'the website'));
  return $pdf;
}

/**
 * Validates a CFD against cfdv2.xsd * or a CFDI against cfdv3.xsd
 * (XML Schemas provided by SAT)
 * removes Addenda and Complemento nodes to avoid issues
 * @param string $xml data to validate
 * @return bool CFDR_VALID or CFDR_INVALID
 */
function cfd_validate_schema(&$xml) {
  $doc = new DOMDocument();
  $doc->loadXML($xml);
  $xpath = new DOMXPath($doc);

  // gather problem nodes: Addenda, Complemento
  $doc_el = $doc->documentElement;

  $addenda_list     = $doc_el->getElementsByTagName('Addenda');
  $complemento_list = $doc_el->getElementsByTagName('Complemento');

  if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/2')) {
    foreach($complemento_list as $complemento) {
      $doc_el->removeChild($complemento);
    }
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/2');
  }
  else if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/3') || $doc->lookupPrefix('http://www.sat.gob.mx/cfd/3') == 'cfdi') {
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/3');
  }

  //remove the problem nodes
  foreach($addenda_list as $addenda) {
    $doc_el->removeChild($addenda);
  }

  $version = $xpath->query('/cfd:Comprobante/@version')->item(0)->value;
  switch ($version) {
    case '2.0':
      $schemaFileName = drupal_get_path('module', 'cfd') . '/resources/sat/cfdv2.xsd';
      break;
    case '2.2':
      $schemaFileName = drupal_get_path('module', 'cfd') . '/resources/sat/cfdv22.xsd';
      break;
    case '3.0':
      $schemaFileName = drupal_get_path('module', 'cfd') . '/resources/sat/cfdv3_con_tfd.xsd';
      break;
    case '3.2':
      $schemaFileName = drupal_get_path('module', 'cfd') . '/resources/sat/cfdv32_con_tfd.xsd';
      break;
    default:
      return FALSE;
  }

  // have to fail versions x.0 emited after July 1st, 2012 (CFD_VERSION_2012 is in unix time)
  $date = strtotime($xpath->query('/cfd:Comprobante/@fecha')->item(0)->value);
  if (($version == '2.0' || $version == '3.0') && $date > CFD_VERSION_2012)
    return CFDR_INVALID;

  $validcfd = @$doc->schemaValidate($schemaFileName);
  // $validcfd = $doc->schemaValidate($schemaFileName);
  return $validcfd;
}

/**
 * Obtiene el certificado desde el SAT si no se tiene todavia...
 * @param string $no_serie Certificate's number
 * @return string $pem_cert PEM formated cert
 */
function _cfd_get_cert($no_serie) {
  $local_cert_dir = variable_get('cfd_cert_path', 'sites/default/cfd/cer');
  // $cert_filename = "$local_cert_dir/$no_serie.cer";
  // Try to get cer_filename form DB
  if (!$cer_filename = db_query('SELECT cer_filename FROM {cfd_pac_certs} WHERE no_serie=?', array($no_serie))->fetchField()) {
    $ftp_server = variable_get('cfd_sat_ftp', 'ftp2.sat.gob.mx');
    $remote_cert_dir   = variable_get('cfd_sat_ftp_dir', 'Certificados/FEA');
    $remote_cert_dir  .= '/' . substr($no_serie, 0, 6) . '/' . substr($no_serie, 6, 6);
    $remote_cert_dir  .= '/' . substr($no_serie, 12, 2) . '/' . substr($no_serie, 14, 2) . '/' . substr($no_serie, 16, 2);

    $sat_ftp = ftp_connect($ftp_server);
    ftp_login($sat_ftp, 'Anonymous', '');
    ftp_chdir($sat_ftp, $remote_cert_dir);
    if (ftp_get($sat_ftp, "$local_cert_dir/$no_serie.cer", "$no_serie.cer", FTP_BINARY)) {
      $cer_filename = "$local_cert_dir/$no_serie.cer";
      $cert_entry['no_serie'] = $no_serie;
      $cert_entry['cer_filename'] = $cer_filename;

      drupal_write_record('cfd_pac_certs', $cert_entry);
      drupal_set_message('Se obtubo el certificado desde el SAT.');
    }
    else {
      drupal_set_message('Error al obtener el Certificado. Intente mÃ¡s tarde.', 'error');
      return FALSE;
    }
    ftp_close($sat_ftp);

  }

  $cert = base64_encode(file_get_contents($cer_filename));
  $pem_cert  = "-----BEGIN CERTIFICATE-----\r\n";
  $pem_cert .= wordwrap($cert, 64, "\r\n", true);
  $pem_cert .= "\r\n-----END CERTIFICATE-----";

  return $pem_cert;
}

/**
 * Validates the CFD's 'sello'
 * @param string $xml The xml string of the CFD to validate
 * @return int CFDR_IND, CFDR_VALID, or CFDR_INVALID
 **/
function cfd_validate_sello(&$xml) {
  $doc = new DOMDocument();
  $doc->loadXML($xml);

  $xsl_content = new DOMDocument();
  $xpath = new DOMXPath($doc);
  if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/2')) {
    // for CFD
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/2');
  }
  else if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/3') || $doc->lookupPrefix('http://www.sat.gob.mx/cfd/3') == 'cfdi') {
    // for CFDI
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/3');
  }

  switch ($xpath->query('/cfd:Comprobante/@version')->item(0)->value) {
    case '2.0':
      $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_2_0.xslt';
      break;
    case '2.2':
      $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_2_2.xslt';
      break;
    case '3.0':
      $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_3_0.xslt';
      break;
    case '3.2':
      $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_3_2.xslt';
      break;
  }

  $year = substr($xpath->query('/cfd:Comprobante/@fecha')->item(0)->value, 0, 4);
  $certificado = $xpath->query('/cfd:Comprobante/@certificado');
  $sello = $xpath->query('/cfd:Comprobante/@sello')->item(0)->value;
  // get cadena original using SAT provided XSLT file.
  $xsl_content->load($xsl_content_file, LIBXML_NOWARNING);
  $xsl = new XSLTProcessor(); @$xsl->importStylesheet($xsl_content);
  $cadena_original = $xsl->transformToXml($doc);


  // Since @certificado is optional in a CFD
  if($certificado->length) {
    // convert $certificado into something openssl can parse
    // but first decode entities and remove whitespaces (and newlines, etc...)
    $cert = preg_replace('/\s+/', '', html_entity_decode($certificado->item(0)->value, ENT_QUOTES, 'UTF-8'));
    $pem_cert  = "-----BEGIN CERTIFICATE-----\r\n";
    $pem_cert .= wordwrap($cert, 64, "\r\n", true);
    $pem_cert .= "\r\n-----END CERTIFICATE-----";
  }
  else {
    // obtain cert from DB or SAT's servers
    $no_certificado = $xpath->query('/cfd:Comprobante/@noCertificado')->item(0)->value;
    if (!$pem_cert = _cfd_get_cert($no_certificado))
      return CFDR_IND;
  }

  // DO validation with cert
  $pub_key = openssl_pkey_get_public($pem_cert);
  if ($year <= 2010)
    $v = openssl_verify($cadena_original, base64_decode($sello), $pub_key, OPENSSL_ALGO_MD5);
  else
    $v = openssl_verify($cadena_original, base64_decode($sello), $pub_key, OPENSSL_ALGO_SHA1);

  return $v;
}

/**
 * Validates the TFD of a CFDI
 */
function cfd_validate_tfd($xml_filename) {
  $doc = new DOMDocument();
  $doc->load($xml_filename);

  $xsl_content = new DOMDocument();
  $xpath = new DOMXPath($doc);
  if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/3') || $doc->lookupPrefix('http://www.sat.gob.mx/cfd/3') == 'cfdi') {
    // for CFDI
    $xsl_content_file = drupal_get_path('module', 'cfd') . '/resources/sat/cadenaoriginal_TFD_1_0.xslt';
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/3');
    $xpath->registerNamespace('tfd', 'http://www.sat.gob.mx/TimbreFiscalDigital');
  }
  else {
    // in case a CFD (or other incompatible file) was passed
    return CFDR_IND;
  }

  $year = substr($xpath->query('/cfd:Comprobante/@fecha')->item(0)->value, 0, 4);
  $no_certificado_sat = $xpath->query('//tfd:TimbreFiscalDigital/@noCertificadoSAT')->item(0)->value;
  $sello              = $xpath->query('//tfd:TimbreFiscalDigital/@selloSAT')->item(0)->value;
  // get cadena original using SAT provided XSLT file.
  $xsl_content->load($xsl_content_file);
  $xsl = new XSLTProcessor(); @$xsl->importStylesheet($xsl_content);
  $cadena_original = $xsl->transformToXml($doc);

  if ($cert = _cfd_get_cert($no_certificado_sat)) {
    $pub_key = openssl_pkey_get_public($cert);

    if ($year <= 2010)
      $v = openssl_verify($cadena_original, base64_decode($sello), $pub_key, OPENSSL_ALGO_MD5);
    else
      $v = openssl_verify($cadena_original, base64_decode($sello), $pub_key, OPENSSL_ALGO_SHA1);

    return $v;
  }
  else
    return CFDR_IND;
}

/**
 * Validates xml structure and sello on one swift function
 * Assumes filename is a valid XML string
 * @param string $xml path to the .xml file to validate
 * @return array (result of cfd_validate_schema, result of cfd_validate_sello)
 */
function cfd_validate_schema_sello($filename) {
  $xml = file_get_contents($filename);
  return array(cfd_validate_schema($xml), cfd_validate_sello($xml));
}

/**
 * Valida el folio localmente
 */
function cfd_validate_folio($serie, $folio, $noAprobacion, $anoAprobacion, $RFC) {
  $query_string = <<<SQL
SELECT count(*) as validstatus
FROM {cfd_folios}
WHERE RFC = :RFC
AND Serie = :serie
AND noAprobacion = :noAprobacion
AND anoAprobacion = :anoAprobacion
AND :folio BETWEEN FolioInicial AND FolioFinal;
SQL;
  $result = db_query($query_string, array(
    ':serie' => $serie,
    ':folio' => $folio,
    ':noAprobacion' => $noAprobacion,
    ':anoAprobacion' => $anoAprobacion,
    ':RFC' => $RFC,
  ))->fetchAssoc();
  return $result['validstatus'];
}

/**
 * Valida el certificado localmente
 */
function cfd_validate_cert($noCertificado, $RFC, $fecha) {
  $query_string = <<<SQL
SELECT count(*) as validstatus
FROM {cfd_certs}
WHERE no_serie = :noCertificado
AND RFC = :RFC
AND :fecha BETWEEN fecha_inicial_cert AND fecha_final_cert;
SQL;
  $result = db_query($query_string, array(
    ':noCertificado' => $noCertificado,
    ':RFC' => $RFC,
    ':fecha' => $fecha,
  ))->fetchAssoc();
  return $result['validstatus'];
}

/**
 * Recive un array y regresa una cadena XML de acuerdo a la especificacion
 * @param $cfd_array estructura del array (debe usar estos nombres de 'key'):
 * array(
 *   array(
 *     'emisor_rfc'     => '...',
 *     'serie'          => '...',
 *     'folio'          => '...',
 *     'no_aprobacion'  => '...',
 *     'ano_aprobacion' => '...',
 *     'no_certificado' => '...',
 *     'fecha_cfd'      => '...',
 *   ),
 *   array(...),
 * )
 * @return string XML
 */
function _cfd_generate_multi_request_xml($cfds) {
  $ns = 'http://www.sat.gob.mx/Asf/Sicofi/ValidacionFoliosCFD/1.0.0';
  $doc = new DOMDocument('1.0', 'UTF-8');
  $doc->formatOutput = TRUE;
  $root = $doc->createElementNS($ns, 'ColleccionFoliosCfd');

  $count = 1;
  foreach ($cfds as $cfd) {
    //create elements
    $folioC         = $doc->createElementNS($ns, 'Folio');
    $id             = $doc->createElementNS($ns, 'Id'                     , $count++);
    $emisor_rfc     = $doc->createElementNS($ns, 'Rfc'                    , $cfd['emisor_rfc']);
    $serie          = $doc->createElementNS($ns, 'Serie'                  , $cfd['serie']);
    $folio          = $doc->createElementNS($ns, 'NumeroFolio'            , $cfd['folio']);
    $no_aprobacion  = $doc->createElementNS($ns, 'NumeroAprobacion'       , $cfd['no_aprobacion']);
    $ano_aprobacion = $doc->createElementNS($ns, 'AnioAprobacion'         , $cfd['ano_aprobacion']);
    $no_certificado = $doc->createElementNS($ns, 'CertificadoNumeroSerie' , $cfd['no_certificado']);
    $fecha_cfd      = $doc->createElementNS($ns, 'CertificadoFechaEmision', str_replace(' ', 'T', $cfd['fecha_cfd']));
    //append created elements
    $folioC->appendChild($id);
    $folioC->appendChild($emisor_rfc);
    $folioC->appendChild($serie);
    $folioC->appendChild($folio);
    $folioC->appendChild($no_aprobacion);
    $folioC->appendChild($ano_aprobacion);
    $folioC->appendChild($no_certificado);
    $folioC->appendChild($fecha_cfd);
    //add folioC (folio container) to root
    $root->appendChild($folioC);
  }
  //append root to the document
  $doc->appendChild($root);

  // $schemaFileName = drupal_get_path('module', 'cfd') . '/resources/sat/SOAPrequest.xsd';
  // echo $doc->schemaValidate($schemaFileName) ? 'valido' : 'no valido';

  return $doc->saveXML();
}

/**
 * Envia una peticion SOAP al servidor SICOFI del SAT
 * @param string $xml el XML a enviar (sin validar)
 *  se espera que sea genrado con _cfd_generate_multi_request_xml(...)
 * @return stirng $xml
 */
function _cfd_sat_soap_request(&$xml) {
  $wsdl = 'https://tramitesdigitales.sat.gob.mx/Sicofi.wsExtValidacionCFD/WsValidacionCFDsExt.asmx?WSDL';
  $sat_soap = new SoapClient($wsdl);
  $response = $sat_soap->ValidarXmlCFD(array('xml' => $xml));
  return $response->ValidarXmlCFDResult;
}

/**
 * Interpreta la respuesta del sat
 * @param string $xml valor devuelto por _cfd_sat_soap_request(...)
 * @return array con Id como key y codigo de validacion del SAT como valor
 *  array('1' => 'VV', '2' => 'IV', ...)
 */
function _cfd_parse_sat_soap_response(&$xml) {
  $doc = new DOMDocument();
  // no whitespace so ->nextSibling works as expected.
  $doc->preserveWhiteSpace = FALSE;
  $doc->loadXML($xml);
  $xpath = new DOMXPath($doc);
  $r_ids = $xpath->query('/cfd:RespuestaFoliosCfd/cfd:ResultadoValidacion/cfd:Id');
  foreach ($r_ids as $id_node) {
    // echo "|- $id_node->tagName -> $id_node->nodeValue\n";
    // print_r($id_node->nextSibling->nodeValue);
    $data[$id_node->nodeValue] = $id_node->nextSibling->nodeValue;
  }
  return $data;
}
