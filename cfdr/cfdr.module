<?php
/**
 * @file Main module file
 */

define('CFDR_INGRESO' , 1);
define('CFDR_EGRESO'  , 2);
define('CFDR_TRASLADO', 3);

define('CFDR_XML_2' , 1);
define('CFDR_XML_3' , 2);
define('CFDR_XML_22', 3);
define('CFDR_XML_32', 4);

/**
 * Implementation of hook_menu().
 */
function cfdr_menu() {
  $menu = array();
  //view all
  $menu['cfdr'] = array(
    'type' => MENU_SUGGESTED_ITEM,
    'title' => 'Ver XMLs recibidos',
    'description' => 'View all CFDs',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_view_cfds',
    // 'page arguments' => array('cfdr_view_cfds'),
  );
  $menu['cfdr/cfds'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'View CFDs',
    'description' => 'View all CFDs',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'weight' => 0,
  );
  // HTML view
  $menu['cfdr/%cfdr'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'View CFD',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_view_single',
    'page arguments' => array(1),
  );
  $menu['cfdr/%cfdr/html'] = array(
    'type' => MENU_CALLBACK | MENU_DEFAULT_LOCAL_TASK,
    'title' => 'View CFD',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'weight' => 0,
  );
  $menu['cfdr/%cfdr/d'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_TASK,
    'title' => 'Ver Detalle',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_view_single_detail',
    'page arguments' => array(1),
    'weight' => 1,
  );
  $menu['cfdr/%cfdr/d/delete'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_ACTION,
    'title' => 'Eliminar',
    'access callback' => 'user_access',
    'access arguments' => array('delete any CFD'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_delete_confirm_form', 1),
    'weight' => 0,
  );
  $menu['cfdr/%cfdr/d/validate'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_ACTION,
    'title' => 'Validar',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_validate',
    'page arguments' => array(1),
    'weight' => 2,
  );
  $menu['cfdr/%cfdr/d/validate_sat'] = array(
    'type' => MENU_CALLBACK, // | MENU_LOCAL_ACTION,
    'title' => 'Validar con SAT',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_validate_remote_single',
    'page arguments' => array(1),
    'weight' => 3,
  );
  $menu['cfdr/%/xml'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_ACTION,
    'title' => 'Descargar XML',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_download_xml',
    'page arguments' => array(1),
    'weight' => 1,
  );
  $menu['cfdr/%/txt'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_ACTION,
    'title' => 'Ver XML',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_display_xml',
    'page arguments' => array(1),
    'weight' => 2,
 );
  $menu['cfdr/%/pdf'] = array(
    'type' => MENU_CALLBACK | MENU_LOCAL_ACTION,
    'title' => 'Ver PDF',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_download_pdf',
    'page arguments' => array(1),
    'weight' => 3,
  );
  //Admin menu
  $menu['admin/config/content/cfdr'] = array(
    'title' => 'CFD - Received Settings',
    'description' => 'Configure CFD - Received options',
    'access callback' => 'user_access',
    'access arguments' => array('administer cfdr'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_admin_form'),
    'file'=>'cfdr.admin.inc',
  );
  //ajax
  $menu['cfdr/ajax/nav_num'] = array(
    'title' => t('cfdr AJAX'),
     'type' => MENU_CALLBACK,
     'page callback' => '_cfdr_nav_number_update_ajax',
     'access callback' => 'user_access',
     'access arguments' => array('edit any CFD'),
  );
  $menu['cfdr/ajax/validate'] = array(
    'title' => t('cfdr validation AJAX'),
     'type' => MENU_CALLBACK,
     'page callback' => '_cfdr_validate_ajax',
     'access callback' => 'user_access',
     'access arguments' => array('view any CFD'),
  );
  $menu['cfdr/fail'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Ver XMLs fallidos',
    'description' => 'Ver los archivos XML mal formados o que no son facturas',
    'access callback' => 'user_access',
    'access arguments' => array('view any CFD'),
    'page callback' => 'cfdr_view_fail',
    'weight' => 2,
  );
  $menu['cfdr/fail/%cfdr_fail_filename/txt'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Ver Archivo',
    'access callback' => 'user_access',
    'access arguments' => array('view failed'),
    'page callback' => '_cfdr_display_txt',
    'page arguments' => array(2),
  );
  $menu['cfdr/fail/%cfdr_fail_filename/dl'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Descargar Archivo',
    'access callback' => 'user_access',
    'access arguments' => array('view failed'),
    'page callback' => '_cfdr_download_txt',
    'page arguments' => array(2),
  );
  return $menu;
}

/**
 * Implementation of hook_theme()
 */
function cfdr_theme() {
  return array(
    'cfdr_filters_fieldset' => array(
      'render element' => 'form'
    ),
    'cfdr_filters' => array(
      'render element' => 'form'
    ),
    'cfdr_view_single_fieldset_form' => array(
      'render element' => 'form'
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function cfdr_permission() {
  return array(
    'administer cfdr' => array(
      'title' => t('Administer CFDr module'),
      'description' => t('Select directories to scan'),
    ),
    'view any CFD' => array(
      'title' => t('View CFDs'),
      'description' => t('Allows role to view any and all CFDs'),
    ),
    'edit any CFD' => array(
      'title' => t('Edit CFDs'),
      'description' => t('Allows role to edit any CFD'),
    ),
    'delete any CFD' => array(
      'title' => t('Delete CFDs'),
      'description' => t('Allows role to delete any CFD'),
    ),
    'view failed' => array(
      'title' => t('Ver fallidos'),
      'description' => t('Allows role to view any non-CFD'),
    ),
  );
}

/**
 * Implementation of hook_token_info()
 */
function cfdr_token_info() {
  // Type cfdr
  $info['types']['cfdr'] = array(
    'name' => 'CFD recibido',
    'description' => 'Tokens para CFDs',
    'needs-data' => 'cfdr',
  );

  // cfdr tokens
  $info['tokens']['cfdr']['emisor_rfc'] = array(
    'name' => 'Emisor RFC',
    'description' => 'RFC del emisor',
  );
  $info['tokens']['cfdr']['receptor_rfc'] = array(
    'name' => 'Receptor RFC',
    'description' => 'RFC del receptor',
  );
  return $info;
}

/**
 * Implementation of hook_tokesn()
 */
function cfdr_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  // $sanitize = !empty($options['sanitize']);

  if ($type == 'cfdr' && !empty($data['cfdr'])) {
    $cfdr = $data['cfdr'];
    foreach ($tokens as $token => $original) {
      switch ($token) {
        case 'emisor_rfc':
          $replacements[$original] = $cfdr->emisor_rfc;
        break;
        case 'receptor_rfc':
          $replacements[$original] = $cfdr->receptor_rfc;
        break;
      }
    }
  }
  return $replacements;
}

/**
 * Saves a fully loaded cfdr object to {cfdr}
 * @return If the record insert or update failed, returns FALSE.
 *  If it succeeded, returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function cfdr_save(&$cfdr) {
  return drupal_write_record('cfdr', $cfdr);
}

/**
 * Deletes a single CFD and it's associated file
 * @param int @cfdr_id which CFD to delete
 */
function cfdr_delete($cfdr_id) {
  cfdr_delete_multiple(array($cfdr_id));
}

/**
 * Deletes a multple CFD and their associated files
 * @param array @cfdr_ids array of cfdr_id (int) to delete
 */
function cfdr_delete_multiple($cfdr_ids) {
  $transaction = db_transaction();
  if (!empty($cfdr_ids)) {
    foreach ($cfdr_ids as $id) {
      $filenames[$id] = cfdr_load_filename($id);
    }
    try {
      db_delete('cfdr')
        ->condition('cfdr_id', $cfdr_ids, 'IN')
        ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('cfdr', $e);
      throw $e;
    }
    foreach ($filenames as $file) {
        drupal_unlink($file);
    }
  }
}

/**
 * Menu callback -- ask for confirmation of CFD deletion
 * based on node_delete_confirm()
 */
function cfdr_delete_confirm_form($form, &$form_state, $cfd) {
  $title = _cfdr_xml_type_to_str($cfd->xml_type) . ": $cfd->serie $cfd->folio";
  $form['cfdr_id']    = array('#type' => 'value', '#value' => $cfd->cfdr_id);
  $form['cfdr_title'] = array('#type' => 'value', '#value' => $title);
  return confirm_form(
    $form,
    t('Are you sure you want to delete %title?', array('%title' => $title)),
    'cfdr/' . $cfd->cfdr_id . '/d',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute cfdr deletion
 * based on node_delete_confirm_submit()
 */
function cfdr_delete_confirm_form_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $cfdr_id = $form_state['values']['cfdr_id'];
    $title = $form_state['values']['cfdr_title'];
    cfdr_delete($cfdr_id);
    watchdog('cfdr', 'Deleted %title.', array('%title' => $title));
    drupal_set_message(t('%title has been deleted.', array('%title' => $title)));
  }
  $form_state['redirect'] = 'cfdr';
}

/**
 * Loads a cfdr object and returns it
 * @param int $cfdr_id Id of the CFD to retreive
 * @return stdObject a loaded node-like object.
 */
function cfdr_load($cfdr_id) {
  return db_query('SELECT * FROM {cfdr} WHERE cfdr_id=?', array($cfdr_id))->fetchObject();
}

/**
 * Returns the filename of a CFD
 * @param int $cfdr_id Id of the CFD to retreive
 */
function cfdr_load_filename($cfdr_id) {
  return db_query('SELECT xml_filename FROM {cfdr} WHERE cfdr_id=?', array($cfdr_id))->fetchField();
}

/**
 * 'cfdr' menu entry callback
 */
function cfdr_view_cfds() {
  drupal_add_css('tr.odd:hover,tr.even:hover  {background: #dbe5f1}', array('type' => 'inline'));
  $js = <<<JS
function cfdr_ajax_v_complete() {
  // jQuery('#v-cfdr_id-' + this.cfdr_id + ' img').show();
}
function cfdr_ajax_v_success(e, xhr, settings) {
  var i = jQuery('#v-cfdr_id-' + this.cfdr_id).removeAttr('onclick');
  jQuery('img', i).remove();
  jQuery('#v-throbber-' + this.cfdr_id).replaceWith(e[1].data);
}
function cfdr_ajax_v_add_throbber(xhr, settings) {
  thrb_id = 'v-throbber-' + settings.cfdr_id;
  // test if there's a throbber and return false (stop request) if there is
  if (jQuery('#' + thrb_id).length > 0) {
    return false;
  }
  // jQuery('#v-cfdr_id-' + this.cfdr_id + ' img').hide();
  jQuery('#v-cfdr_id-' + this.cfdr_id + ' img').remove();
  jQuery('#v-cfdr_id-' + settings.cfdr_id).append('<div id=' + thrb_id + ' style="float:none;display: inline-block; vertical-align: text-bottom;;" class="ajax-progress"><div class="throbber">&nbsp;</div></div>');
}
JS;
  drupal_add_js($js, array('type' => 'inline'));
  drupal_add_js(drupal_get_path('module', 'cfdr') . '/cfdr.cfds.ajax.js', array('type' => 'file'));

  $query = db_select('cfdr', 'c')->fields('c');
  $filters = isset($_SESSION['cfdr_filters']) ? $_SESSION['cfdr_filters'] : NULL;
  if (isset($filters)) {
    foreach ($filters as $filter => $value) {
      switch ($filter) {
        // default:
        case 'receptor_rfc':
        case 'serie':
          $or = db_or();
          foreach ($value as $v) {
            if ($v == NULL)
              $or->isNull($filter);
            else
              $or->condition($filter, $v);
          }
          $query->condition($or);
        break;
        case 'fecha_cfd':
          if (isset($value['start']) && isset($value['end']))
            $query->condition(db_and()->condition('fecha_cfd', $value['start'], '>=')->condition('fecha_cfd', $value['end'], '<='));
          else if (!isset($value['start']) && isset($value['end']))
            $query->condition('fecha_cfd', $value['end'], '<=');
          else if (isset($value['start']) && !isset($value['end']))
            $query->condition('fecha_cfd', $value['start'], '>=');
        break;
        case 'emisor_nombre':
          // $query->condition('emisor_nombre', '%%'.$value.'%%', 'LIKE');
          $or = db_or();
          foreach (explode('|', $value) as $v) {
            $or->condition('emisor_nombre', '%%' . trim($v) . '%%', 'LIKE');
          }
          $query->condition($or);
        break;
        case 'validstatus':
          switch ($value) {
            case 1: // Valid
              $and = db_and();
              $and->condition('validstatus_xml', 1);
              $and->condition('validstatus_sello', 1);
              $and->condition('validstatus_cert', 1);
              $and->condition('validstatus_folio', 1);
              $query->condition($and);
            break;
            case 2: // Invalid
              $or = db_or();
              $or->condition('validstatus_xml', 0);
              $or->condition('validstatus_sello', 0);
              $or->condition('validstatus_cert', 0);
              $or->condition('validstatus_folio', 0);
              $query->condition($or);
            break;
            case 3: // Indeterminate
              $or = db_or();
              $or->condition('validstatus_xml', -1);
              $or->condition('validstatus_sello', -1);
              $or->condition('validstatus_cert', -1);
              $or->condition('validstatus_folio', -1);
              $or->isNull('validstatus_xml');
              $or->isNull('validstatus_sello');
              $or->isNull('validstatus_cert');
              $or->isNull('validstatus_folio');
              $query->condition($or);
            break;
          }
        break;
        case 'navfc':
          $v = trim($value);
          if (strtolower($v) == 'null')
            $query->isNull('nav_number');
          else if ($v == '*')
            $query->isNotNull('nav_number');
          else if (strpos($v, '..') > 0) {
            $range = explode('..', $v);
            $range_condition = db_and();
            $range_condition->condition('nav_number', (int) $range[0], '>=');
            $range_condition->condition('nav_number', (int) $range[1], '<=');
            $query->condition($range_condition);
          }
          else
            $query->condition('nav_number', $value);
        break;
        case 'cfd_type':
          switch ($value) {
            case CFDR_INGRESO: // Valid
              $query->condition('cfd_type', CFDR_INGRESO);
            break;
            case CFDR_EGRESO: // INVALID
              $query->condition('cfd_type', CFDR_EGRESO);
            break;
            case CFDR_TRASLADO: // INDTEREMINATE
              $query->condition('cfd_type', CFDR_TRASLADO);
            break;
          }

        break;
      }
    }
  }

  $header = array(
    '',
    '',
    array('data' =>   'Serie'    , 'field' => 'serie'),
    array('data' =>   'Folio'    , 'field' => 'folio'),
    array('data' => t('Emisor')  , 'field' => 'emisor_rfc'),
    array('data' => t('Date')    , 'field' => 'fecha_cfd', 'sort' => 'desc'),
    array('data' =>   '$ Total'  , 'field' => 'importe'),
    array('data' =>   'Folio NAV', 'field' => 'nav_number'),
    array('data' =>   'CFD Tipo' , 'field' => 'cfd_type'),
  );
  // drupal_set_message((string) $query); $results = array();
  $query = $query->extend('PagerDefault')->limit(40)->extend('TableSort')->orderByHeader($header);
  $results = $query->execute();

  $rows = array();
  foreach ($results as $cfd) {
    $validity = cfdr_validstatus_overview($cfd);
    $fecha = new DateObject($cfd->fecha_cfd, date_default_timezone(), DATE_FORMAT_DATETIME);
    $ajax_url = url('cfdr/ajax/nav_num');
    $ajax_v_url = url('cfdr/ajax/validate');
    $rows[] = array(
      'data' => array(
        l(t('View'), "cfdr/{$cfd->cfdr_id}", array(
          'attributes' => array(
            'ondblclick' => "javascript:window.location = 'cfdr/{$cfd->cfdr_id}/d';",
          )
        )),
        $validity == CFDR_IND ?
          array(
            'data' => '<span style="cursor:pointer">' . cfdr_validstatus_image($validity) . '</span>',
            'id' => 'v-cfdr_id-' . $cfd->cfdr_id,
            'onclick' =>
                "jQuery.ajax({
                  cfdr_id: '{$cfd->cfdr_id}',
                  type: 'POST',
                  url: '{$ajax_v_url}',
                  beforeSend: cfdr_ajax_v_add_throbber,
                  success: cfdr_ajax_v_success,
                  //complete: cfdr_ajax_v_complete,
                  //error: cfdr_ajax_error,
                  data: {cfdr_id: '{$cfd->cfdr_id}'}
                });")
          : cfdr_validstatus_image($validity),
        $cfd->serie,
        $cfd->folio,
        (strlen($cfd->emisor_nombre) >=50)
          ? array('data' => substr($cfd->emisor_nombre, 0, 40) . '...', 'title'=>$cfd->emisor_nombre)
          : $cfd->emisor_nombre,
        format_date($fecha->format(DATE_FORMAT_UNIX), 'custom', 'j M Y'),
        array('data' => '$' . number_format($cfd->importe, 2), 'style' => 'text-align:right;'),
        // $cfd->nav_number,
        user_access('edit any CFD') && is_null($cfd->nav_number) ? 
          array('data' => array(
            '#type' => 'textfield',
            '#size' => 9,
            '#value' => $cfd->nav_number,
            '#attributes' => array(
              'id' => 'cfdr_id-' . $cfd->cfdr_id,
              'onchange' => 
                "jQuery.ajax({
                  cfdr_id: '{$cfd->cfdr_id}',
                  type: 'POST',
                  url: '{$ajax_url}',
                  beforeSend: cfdr_ajax_add_throbber,
                  success: cfdr_ajax_success,
                  complete: cfdr_ajax_complete,
                  error: cfdr_ajax_error,
                  data: {cfdr_id: '{$cfd->cfdr_id}', nav_number: this.value}
                });",
            ),
          )) : $cfd->nav_number,
        _cfdr_cfd_type_to_str($cfd->cfd_type),
      ),
    );
  }
  return drupal_render(drupal_get_form('cfdr_filters_form')) .
    theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No CFDs available.'))) .
    theme('pager', array('tags' => array()));
}

/**
 * Updates the nav_number from an AJAX call
 * expects to receive cfdr_id and nav_number as post variables.
 */
function _cfdr_nav_number_update_ajax() {
  $cfdr_id    = $_POST['cfdr_id'];
  $nav_number = $_POST['nav_number'];
  if (!(is_numeric($cfdr_id) && is_numeric($nav_number))) // if either is not numeric
    drupal_add_http_header('Status', '400 Bad Request', FALSE);
  else { //both are numeric
    $query = db_update('cfdr')->condition('cfdr_id', $cfdr_id)->fields(array('nav_number' => $nav_number));
    if ($query->execute() == 0) {
      drupal_add_http_header('Status', '500 Internal Server Error', FALSE);
      exit();
    }      
  }
  drupal_add_http_header('Content-Type', 'text/plain', FALSE);
}

/**
 * filter form for 'cfdr' menu entry callback
 */
function cfdr_filters_form() {
  // cfd_include_datepick();
  $form['receptor_rfc'] = array(
    '#type' => 'select',
    '#title' => 'RFC Receptor',
    '#default_value' =>  @array_keys($_SESSION['cfdr_filters']['receptor_rfc']),
    '#options' => _cfdr_get_select('receptor_rfc'),
    '#multiple' => TRUE,
  );
  $form['emisor_nombre'] = array(
    '#type' => 'textfield',
    '#title' => 'Nombre emisor',
    '#size' => 50,
    '#maxlength' => 255,
    '#default_value' => @$_SESSION['cfdr_filters']['emisor_nombre'],
    '#description' => 'Nombre o parte del nombre<br/>Separe multiples provedores con | (pipe).'
  );
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => 'Más Filtros',
    '#collapsible' => TRUE,
    // '#collapsed' => FALSE,
    '#collapsed' => (isset($_SESSION['cfdr_filters']['serie']) ||
                        isset($_SESSION['cfdr_filters']['fecha_cfd']) ||
                        isset($_SESSION['cfdr_filters']['validstatus']) ||
                        isset($_SESSION['cfdr_filters']['cfd_type']) ||
                        isset($_SESSION['cfdr_filters']['navfc'])) ? FALSE : TRUE,
  );
  $form['filters']['serie'] = array(
    '#type' => 'select',
    '#title' => 'Serie',
    '#default_value' => @array_keys($_SESSION['cfdr_filters']['serie']),
    '#options' => _cfdr_get_select('serie'),
    '#multiple' => TRUE,
    '#size' => 10,
  );
  // RFCs
  // $form['filters']['emisor_rfc'] = array(
  //   '#type' => 'select',
  //   '#title' => 'RFC Emisor',
  //   '#default_value' =>  @array_keys($_SESSION['cfdr_filters']['emisor_rfc']),
  //   '#options' => _cfdr_get_select('emisor_rfc'),
  //   '#multiple' => TRUE,
  // );
  // Date filter
  $form['filters']['fecha_cfd']['start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start date'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Format: yyyy-mm-dd'),
    '#default_value' => substr(@$_SESSION['cfdr_filters']['fecha_cfd']['start'], 0, 10),
  );
  $form['filters']['fecha_cfd']['end'] = array(
    '#type' => 'textfield',
    '#title' => t('End date'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Format: yyyy-mm-dd'),
    '#default_value' => substr(@$_SESSION['cfdr_filters']['fecha_cfd']['end'], 0, 10),
  );
  $form['filters']['validstatus'] = array(
    '#type' => 'radios',
    '#title' => 'Validación',
    '#default_value' => @$_SESSION['cfdr_filters']['validstatus'],
    '#options' => array(
      t('All'), // All is default... must have 0 value for simplicity
      theme('image', array('path'=>'misc/watchdog-ok.png', 'attributes' => array('title'=>'Valido'))), // 1
      theme('image', array('path'=>'misc/watchdog-error.png', 'attributes' => array('title'=>'Invalido'))), // 2
      theme('image', array('path'=>'misc/watchdog-warning.png', 'attributes' => array('title'=>'No se sabe'))), // 3
    ),
  );
  $form['filters']['cfd_type'] = array(
    '#type' => 'radios',
    '#title' => 'CFD Tipo',
    '#default_value' => @$_SESSION['cfdr_filters']['cfd_type'],
    '#options' => array(
      0 => t('All'), // All is default... must have 0 value for simplicity
      CFDR_INGRESO => _cfdr_cfd_type_to_str(CFDR_INGRESO),
      CFDR_EGRESO => _cfdr_cfd_type_to_str(CFDR_EGRESO),
      CFDR_TRASLADO => _cfdr_cfd_type_to_str(CFDR_TRASLADO),
    ),
  );
  $form['filters']['navfc'] = array(
    '#type' => 'textfield',
    '#title' => 'NAV FC',
    '#size' => 15,
    '#maxlength' => 11,
    '#default_value' => @$_SESSION['cfdr_filters']['navfc'],
    '#description' => 'Número completo.<br/><em>*</em> busca cualquier número<br/><em>NULL</em> busca los que no tienen número.<br/><em>1..100</em> busca el rango del 1 al 100.'
  );

  // Buttons
  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#submit' => array('cfdr_filters_form_submit'),
  );
  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#submit' => array('cfdr_filters_form_reset'),
  );
  $form['#theme'] = 'cfdr_filters';
  $form['filters']['#theme'] = 'cfdr_filters_fieldset';
  // $form['filters']['#submit'][] = 'cfdr_filters_form_submit';
  // $form['#submit'][] = 'cfdr_filters_form_submit';
  // dpm($form);
  return $form;
}

/**
 *
 */
function cfdr_filters_form_submit($form, &$form_state) {
  unset($_SESSION['cfdr_filters']);
  $filters = &$_SESSION['cfdr_filters'];
  $values = $form_state['values'];
  // dpm($form);
  // dpm($form_state['values']);

  // foreach ($values['emisor_rfc'] as $key)
  //   $filters['emisor_rfc'][$key] = $form['filters']['emisor_rfc']['#options'][$key];

  foreach ($values['serie'] as $key)
    $filters['serie'][$key] = $form['filters']['serie']['#options'][$key];

  foreach ($values['receptor_rfc'] as $key)
    $filters['receptor_rfc'][$key] = $form['receptor_rfc']['#options'][$key];

  if ($values['start']) {
    $start = date_create($values['start']);
    $filters['fecha_cfd']['start'] = date_format($start, DATE_FORMAT_ISO);
  }
  if ($values['end']) {
    $end = date_create($values['end']);
    $end->modify('+23 hours 59 minutes 59 seconds');
    $filters['fecha_cfd']['end'] = date_format($end, DATE_FORMAT_ISO);
  }
  if ($values['emisor_nombre']) {
    $filters['emisor_nombre'] = $values['emisor_nombre'];
  }
  if ($values['validstatus']) {
    $filters['validstatus'] = $values['validstatus'];
  }
  if ($values['cfd_type']) {
    $filters['cfd_type'] = $values['cfd_type'];
  }
  if ($values['navfc']) {
    $filters['navfc'] = $values['navfc'];
  }
}

/**
 * 
 */
function cfdr_filters_form_reset($form, &$form_state) {
  unset($_SESSION['cfdr_filters']);
}

function _cfdr_xml_type_to_str($xml_type) {
    switch ($xml_type) {
    case CFDR_XML_2:
    case CFDR_XML_22:
      return 'CFD';
    break;
    case CFDR_XML_3:
    case CFDR_XML_32:
      return 'CFDI';
    break;
  }
}

function _cfdr_xml_type_to_version($xml_type) {
    switch ($xml_type) {
    case CFDR_XML_2:
      return 'CFD v2';
    case CFDR_XML_22:
      return 'CFD v2.2';
    break;
    case CFDR_XML_3:
      return 'CFD v3 (CFDI)';
    case CFDR_XML_32:
      return 'CFD v3.2 (CFDI)';
    break;
  }
}

function _cfdr_cfd_type_to_str($cfd_type) {
    switch ($cfd_type) {
    case CFDR_TRASLADO:
      return 'Traslado';
    break;
    case CFDR_INGRESO:
      return 'Factura';
    break;
    case CFDR_EGRESO:
      return 'Nota de C.';
    break;
  }
}

/**
 * used to populate fields in cfdr_filter_form()
 */
function _cfdr_get_select($field) {
  $query = db_select('cfdr', 'c')->groupBy('c.'.$field)->orderBy('c.'.$field);
  $query->addField('c', $field);
  $results = $query->execute()->fetchAll();
  $options = array();
  foreach ($results as $r)
    $options[] = $r->$field;
  return $options;
}

/**
 * Theme for cfdr_filter_form() except the fieldset
 */
function theme_cfdr_filters($variables) {
  $form = $variables['form'];
  $output  = '<div style="display: inline-block;">';
    $output .= '<div style="display: inline-block; padding-right: 15px">' . drupal_render($form['receptor_rfc']) . '</div>';
    $output .= '<div style="display: inline-block;">' . drupal_render($form['emisor_nombre']) . '</div>';
  $output .= '</div>';
  $output .= drupal_render($form['filters']);
  $output .= drupal_render($form['filter']) . drupal_render($form['reset']);
  $output .= drupal_render($form['form_id']) . drupal_render($form['form_token']);
  // $output .= $form;
  return $output;
}

/**
 * Theme for the fieldset in cfdr_filter_form()
 */
function theme_cfdr_filters_fieldset($variables) {
  $form = $variables['form'];
  $output  = '<div style="display: inline-block;">';
    $output .= '<div style="display: table-cell; padding-right: 15px">' . drupal_render($form['navfc']) . '</div>';
    $output .= '<div style="display: table-cell; padding-right: 15px">' . drupal_render($form['fecha_cfd']['start']) . '</div>';
    $output .= '<div style="display: table-cell;">' . drupal_render($form['fecha_cfd']['end']) . '</div>';
    // $output .= '<div style="display: inline-block;">' . drupal_render($form['emisor_nombre']) . '</div>';
  $output .= '</div><div style="display: table-row;">';
    $output .= '<div style="display: table-cell;">' . drupal_render($form['serie']) . '</div>';
    $output .= '<div style="display: table-cell; padding-left: 30px">' . drupal_render($form['validstatus']) . '</div>';
    $output .= '<div style="display: table-cell; padding-left: 30px">' . drupal_render($form['cfd_type']) . '</div>';
    // $output .= '<div style="display: table-cell;">' . drupal_render($form['receptor_rfc']) . '</div>';
  $output .= '</div>';
  // $output .= '</div><div style="display: table-row;">';
  // $output .= '</div>';
  // $output .= drupal_render($form['valid']);
  // $output .= drupal_render($form['filter']) . drupal_render($form['reset']);
  return $output;
}

/*
 * Visualize the details of a single CFD in a page
   $style = <<<CSS
.validstatusR {color:white; font-weight:bold; text-align:center; background-color: red;}
.validstatusY {color:grey;  font-weight:bold; text-align:center; background-color: yellow;}
.validstatusG {color:white; font-weight:bold; text-align:center; background-color: green;}
CSS;
  drupal_add_css($style, array('type' => 'inline'));
 */
function cfdr_view_single($cfd) {
  drupal_add_js(drupal_get_path('module', 'cfdr') . '/cfdr.cfds.ajax.js', array('type' => 'file'));
  if (is_null($cfd->validstatus_xml) || is_null($cfd->validstatus_sello) || is_null($cfd->validstatus_cert) || is_null($cfd->validstatus_folio))
    drupal_goto("cfdr/$cfd->cfdr_id/d/validate", array('query' => array('destination' => "/cfdr/$cfd->cfdr_id")));

  drupal_set_breadcrumb(array(
    l(t('Home'), ''),
    l('Ver XMLs recibidos', 'cfdr')
  ));
  $xml_type = _cfdr_xml_type_to_str($cfd->xml_type);
  drupal_set_title("<strong>$xml_type</strong>: $cfd->serie $cfd->folio", PASS_THROUGH);

  //nested table left
  $rowsLeft = array(
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right;',
          'data' => 'Serie',
        ),
        array(
          'data' => $cfd->serie,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right;',
          'data' => 'Folio',
        ),
        array(
          'data' => $cfd->folio,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right;',
          'data' => 'Fecha-Hora',
        ),
        array(
          'data' => $cfd->fecha_cfd,
        ),
      ),
    ),
  );

  //nested table right
  $ajax_url = url('cfdr/ajax/nav_num');
  $rowsRight = array(
    array(
      array(
        'colspan' => 2,
        'header' => TRUE,
        'style' => 'text-align: center; text-transform: uppercase;',
        'data' => _cfdr_cfd_type_to_str($cfd->cfd_type),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right;',
          'data' => 'Total',
        ),
        array(
          'data' => '$' . number_format($cfd->importe, 2),
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right;',
          'data' => 'Folio NAV',
        ),
        array(
          'data' =>
          user_access('edit any CFD') ?
            array('data' => array(
              '#type' => 'textfield',
              '#size' => 10,
              '#value' => $cfd->nav_number,
              '#attributes' => array(
                'id' => 'cfdr_id-' . $cfd->cfdr_id,
                'onchange' => 
                  "jQuery.ajax({
                    cfdr_id: '{$cfd->cfdr_id}',
                    type: 'POST',
                    url: '{$ajax_url}',
                    beforeSend: cfdr_ajax_add_throbber,
                    success: cfdr_ajax_success,
                    complete: cfdr_ajax_complete,
                    error: cfdr_ajax_error,
                    data: {cfdr_id: '{$cfd->cfdr_id}', nav_number: this.value}
                  });",
              ),
            )) : $cfd->nav_number,
        ),
      ),
    ),
  );

  $header = array(
    array(
      // 'colspan' => 2,
      'style' => 'font-size: 14pt; text-align: center;',
      'data' => '<em>Emisor:</em> ' . $cfd->emisor_nombre . '<br/>' . $cfd->emisor_rfc
    ),
    array(
      'style' => 'font-size: 14pt; text-align: center;',
      'data' => '<em>Receptor:</em> ' . $cfd->receptor_rfc
    ),
  );
  $rows = array(
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => theme('table', array('rows' => $rowsLeft,)),
        ),
        array(
          'data' => theme('table', array('rows' => $rowsRight)),
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'header' => TRUE,
          'style' => 'text-align: right; vertical-align: middle;',
          // 'class' => (substr($sat_valid[1], 0, 1) == 'V') ? 'validstatusG' : 'validstatusR',
          'data' => 'Validación',
        ),
        array(
          // 'style' => 'vertical-align: bottom;',
          // 'class' => (substr($sat_valid[1], 1, 1) == 'V') ? 'validstatusG' : 'validstatusR',
          'data' => cfdr_validstatus_image(cfdr_validstatus_overview($cfd)),
        ),
      ),
    )
  );

  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => 'width:100%;')));
}

/**
 * Visualize an overview of a single CFD in a page
 */
function cfdr_view_single_detail($cfd) {
  if (is_null($cfd->validstatus_xml) || is_null($cfd->validstatus_sello) || is_null($cfd->validstatus_cert) || is_null($cfd->validstatus_folio)) {
    drupal_goto("cfdr/$cfd->cfdr_id/d/validate");
  }

  $xml_type = _cfdr_xml_type_to_str($cfd->xml_type);
  drupal_set_title("<strong>$xml_type</strong>: $cfd->serie $cfd->folio", PASS_THROUGH);

  // .dt-data {text-align: center; font-size: 14pt;}
  $style = <<<CSS
.validstatusR {color:white; font-weight:bold; text-align:center; background-color: red;}
.validstatusY {color:dimgray; font-weight:bold; text-align:center; background-color: yellow;}
.validstatusG {color:white; font-weight:bold; text-align:center; background-color: green;}
CSS;
  drupal_add_css($style, array('type' => 'inline'));

  // $sat_valid = _cfd_parse_sat_soap_response(_cfd_sat_soap_request(_cfd_generate_multi_request_xml(array((array) $cfd))));

  if ($xml_type == 'CFD') {
    if (is_null($cfd->validstatus_sat))
      $sat_valid_table_row = array(
        array(
          'data' => 'Validación Externa del SAT   -&gt;',
          'colspan' => 2,
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => 'No Disponible',
          'style' => 'font-weight: bold; text-align: center;',
        ),
        array(
          'data' => l('Indeterminado', "cfdr/$cfd->cfdr_id/d/validate_sat"),
          // 'colspan' => 2,
          'class' => 'validstatusY',
        ),
      );
    else
      $sat_valid_table_row = array(
        array(
          'data' => 'Validación Externa del SAT   -&gt;',
          'colspan' => 2,
          'style' => 'font-weight: bold; text-align: right;',
        ),
        array(
          // This result is useless (december-2011)
          'data' => 'No Sirve ('.$cfd->validstatus_sat[1].')',
          'style' => 'font-weight: bold; text-align: center;',
          // 'data' => $cfd->validstatus_sat[1],
          // 'class' => ($cfd->validstatus_sat[1] == 'V') ? 'validstatusG' : 'validstatusR',
        ),
        array(
          'data' => $cfd->validstatus_sat[0],
          'class' => ($cfd->validstatus_sat[0] == 'V') ? 'validstatusG' : 'validstatusR',
        ),
      );
  }
  else
    $sat_valid_table_row = array(
      array(
        'data' => 'Validación Externa del SAT   -&gt;',
        'colspan' => 2,
        'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
      ),
      array(
        'data' => 'No Disponible',
        'colspan' => 2,
        'style' => 'font-weight: bold; text-align: center;',
      ),
    );

  $header = array(
    array('data' => 'Estructura XML (parcial)'),
    array('data' => 'Sello'),
    array('data' => 'Certificado'),
    array('data' => $xml_type == 'CFD' ? 'Folio' : 'TFD'),
  );
  $rows = array(
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => ($cfd->validstatus_xml == CFDR_IND ? 'Indeterminado' : ($cfd->validstatus_xml ? 'Valido' : 'Invalido')),
          'class' => ($cfd->validstatus_xml == CFDR_IND ? 'validstatusY' : ($cfd->validstatus_xml ? 'validstatusG' : 'validstatusR')),
          'style' => 'width: 25%;',
        ),
        array(
          'data' => ($cfd->validstatus_sello == CFDR_IND ? 'Indeterminado' : ($cfd->validstatus_sello ? 'Valido' : 'Invalido')),
          'class' => ($cfd->validstatus_sello == CFDR_IND ? 'validstatusY' : ($cfd->validstatus_sello ? 'validstatusG' : 'validstatusR')),
          'style' => 'width: 25%;',
        ),
        array(
          'data' => ($cfd->validstatus_cert == CFDR_IND ? 'Indeterminado' : ($cfd->validstatus_cert ? 'Valido' : 'Invalido')),
          'class' => ($cfd->validstatus_cert == CFDR_IND ? 'validstatusY' : ($cfd->validstatus_cert ? 'validstatusG' : 'validstatusR')),
          'style' => 'width: 25%;',
        ),
        array(
          'data' => ($cfd->validstatus_folio == CFDR_IND ? 'Indeterminado' : ($cfd->validstatus_folio ? 'Valido' : 'Invalido')),
          'class' =>($cfd->validstatus_folio == CFDR_IND ? 'validstatusY' : ($cfd->validstatus_folio ? 'validstatusG' : 'validstatusR')),
          'style' => 'width: 25%;',
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => $sat_valid_table_row,
    ),
    array('no_striping' => TRUE, 'data' => array(array('data' => '&nbsp;', 'style' => 'background-color: white;', 'colspan' => 4))),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'Archivo',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => str_replace(variable_get('cfdr_move_path', 'sites/default/cfd/received'), '...', $cfd->xml_filename),
          'title' => variable_get('cfdr_move_path', 'sites/default/cfd/received'),
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'RFC emisor',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->emisor_rfc,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'No. Aprobación (Solo CFD)',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->no_aprobacion,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'Año Aprobación (Solo CFD)',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->ano_aprobacion,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'Fecha',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->fecha_cfd,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'No. Certificado',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->no_certificado,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'TFD UUID (Solo CFDI)',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => $cfd->uuid,
          'colspan' => 3,
        ),
      ),
    ),
    array(
      'no_striping' => TRUE,
      'data' => array(
        array(
          'data' => 'CFD Version (xml_type)',
          'style' => 'background-color: lightgrey; font-weight: bold; text-align: right;',
        ),
        array(
          'data' => _cfdr_xml_type_to_version($cfd->xml_type),
          'colspan' => 3,
        ),
      ),
    ),
  );

  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => 'width:100%;')));
}

/**
 * CFD status (valid) and nav_number edit form
 */
function cfdr_view_single_form($form, &$form_state, $cfd) {
  $form['efield'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edit'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['efield']['cfd_id'] = array(
    '#type' => 'hidden',
    '#value' => $cfd->cfdr_id,
  );

  $form['efield']['valid'] = array(
    '#type' => 'radios',
    '#title' => t('Status'),
    '#default_value' => _cfdr_valid2option($cfd->valid),
    '#options' => array(
      theme('image', array('path'=>'misc/watchdog-ok.png')),
      theme('image', array('path'=>'misc/watchdog-warning.png')),
      theme('image', array('path'=>'misc/watchdog-error.png')),
    ),
  );
  $form['efield']['nav_number'] = array(
    '#type' => 'textfield',
    '#title' => 'NAV FC-',
    '#default_value' => $cfd->nav_number,
    '#description' => 'Número de documento de NAV<br/>User números negativos (-1) para cancelados',
  );
  // Buttons
  $form['efield']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  $form['efield']['#theme'] = 'cfdr_view_single_fieldset_form';
  $form['#submit'][] = 'cfdr_view_single_form_submit';
  return $form;
}

function cfdr_view_single_form_submit($form, &$form_state) {
  // dpm($form, 'form');
  // dpm($form_state, 'state');
  $cfd_id = $form_state['values']['cfd_id'];
  $valid = $form_state['values']['valid'];
  $nav_number = $form_state['values']['nav_number'];

  if (strlen($nav_number) == 0) unset($nav_number);
  // turn valid from option value to DB value
  switch ($valid) {
    case 0:
      $valid = 1; //TRUE
    break;
    case 1:
      unset($valid); //NULL
    break;
    case 2:
      $valid = 0; //FALSE
    break;
  }
  $update = array(
    'cfdr_id' => $cfd_id,
    'valid' => $valid,
    'nav_number' => $nav_number,
  );
  // dpm($update, 'updt');
  drupal_write_record('cfdr', $update, 'cfdr_id');

}

/**
 * Theme for cfdr_view_single_form fieldset
 */
function theme_cfdr_view_single_fieldset_form($variables) {
  $form = $variables['form'];
  $output = '<table><tr style="background-color: white;">';
    $output .= '<td style="width: 50%;">' . drupal_render($form['valid']) . '</td>';
    $output .= '<td style="width: 50%;">' . drupal_render($form['nav_number']) . '</td>';
  $output .= '</tr></table>';
  $output .= drupal_render($form['update']);
  return $output;
}

/**
 * Returns the xml file of the cfd node for download.
 * @param StdObject $node
 */
function cfdr_download_xml($cfdr_id) {
  $filename = cfdr_load_filename($cfdr_id);
  $basename = basename($filename);

  // Code based on file_transfer() but modified to serve files outside the
  // drupal file system
  if (ob_get_level()) {
    ob_end_clean();
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($filename, 'rb')) {
    drupal_add_http_header('Content-Description', 'File Transfer');
    drupal_add_http_header('Content-Disposition', 'attachment; filename='.$basename, TRUE);
    drupal_add_http_header('Content-type', 'text/xml', TRUE);
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Returns the xml file of the cfd node for display.
 * @param StdObject $node
 */
function cfdr_display_xml($cfdr_id) {
  _cfdr_display_xml(cfdr_load_filename($cfdr_id));
}

/**
 * Returns file in $filename for in-browser display
 */
function _cfdr_display_xml($filename) {
  $basename = basename($filename);

  // Code based on file_transfer() but modified to serve files outside the
  // drupal file system
  if (ob_get_level()) {
    ob_end_clean();
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($filename, 'rb')) {
    drupal_add_http_header('Content-Description', 'File Transfer');
    drupal_add_http_header('Content-Disposition', 'inline; filename='.$basename, TRUE);
    drupal_add_http_header('Content-type', 'text/xml; charset=utf-8', TRUE);
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Returns file in $filename for in-browser display
 */
function _cfdr_display_txt($filename) {
  $basename = basename($filename);

  // Code based on file_transfer() but modified to serve files outside the
  // drupal file system
  if (ob_get_level()) {
    ob_end_clean();
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($filename, 'rb')) {
    drupal_add_http_header('Content-Description', 'File Transfer');
    drupal_add_http_header('Content-Disposition', 'inline; filename='.$basename, TRUE);
    drupal_add_http_header('Content-type', 'text/plain; charset=utf-8', TRUE);
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Returns the txt file for download.
 */
function _cfdr_download_txt($filename) {
  $basename = basename($filename);

  // Code based on file_transfer() but modified to serve files outside the
  // drupal file system
  if (ob_get_level()) {
    ob_end_clean();
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($filename, 'rb')) {
    drupal_add_http_header('Content-Description', 'File Transfer');
    drupal_add_http_header('Content-Disposition', 'attachment; filename='.$basename, TRUE);
    drupal_add_http_header('Content-type', 'text/plain', TRUE);
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Gets the out of the node and gets the PDF from cfd_make_pdf() then
 * sends it to the browser.
 * @param StdObject $node
 */
function cfdr_download_pdf($cfdr_id) {
  //generate PDF
  $pdf = cfd_make_pdf(cfdr_load_filename($cfdr_id));
  //send generated file to browser
  $pdf->Output();
}

/**
 * Get the appropriate image for valid, invalid, and to be determined CFD validity
 */
function cfdr_validstatus_image($status) {
  switch ($status) {
    case CFDR_IND:
      return theme('image', array('path'=>'misc/watchdog-warning.png', 'attributes' => array(
        'style' => 'vertical-align: bottom;', 'title'=>'No se sabe')));
      break;
    case CFDR_VALID:
      return theme('image', array('path'=>'misc/watchdog-ok.png', 'attributes' => array(
        'style' => 'vertical-align: bottom;', 'title'=>'Válido')));
      break;
    case CFDR_INVALID:
      return theme('image', array('path'=>'misc/watchdog-error.png', 'attributes' => array(
        'style' => 'vertical-align: bottom;', 'title'=>'Inválido')));
      break;
  }
}

/**
 * Takes 4 validstatus_* and returns just one
 * @param stdObject $cfd (by reference) CFD to examine
 * @return one of CFDR_VALID (if all validstatus are valid),
 *   CFDR_INVALID (if any validstatus is invalid),
 *   or CFDR_IND (if any validastaus is NULL or indeterminate)
 */
function cfdr_validstatus_overview(&$cfd) {
  /*
  if (is_null($cfd->validstatus_xml) || is_null($cfd->validstatus_sello) || is_null($cfd->validstatus_cert) || is_null($cfd->validstatus_folio)) {
    return l(cfdr_validstatus_image(CFDR_IND) . '&nbsp;&nbsp;Validar', "/cfdr/$cfd->cfdr_id/d/validate", array('html' => TRUE, 'query' => array('destination' => "/cfdr/$cfd->cfdr_id")));
  }
  else */
  if
    (is_null($cfd->validstatus_xml) ||
    is_null($cfd->validstatus_sello) ||
    is_null($cfd->validstatus_cert) ||
    is_null($cfd->validstatus_folio ||
    $cfd->validstatus_xml  == CFDR_IND ||
    $cfd->validstatus_sello == CFDR_IND ||
    $cfd->validstatus_cert  == CFDR_IND ||
    $cfd->validstatus_folio == CFDR_IND))
  {
    return CFDR_IND;
  }
  else if
    ($cfd->validstatus_xml  == CFDR_VALID &&
    $cfd->validstatus_sello == CFDR_VALID &&
    $cfd->validstatus_cert  == CFDR_VALID &&
    $cfd->validstatus_folio == CFDR_VALID)
  {
    return CFDR_VALID;
  }
  else if
    ($cfd->validstatus_xml  == CFDR_INVALID ||
    $cfd->validstatus_sello == CFDR_INVALID ||
    $cfd->validstatus_cert  == CFDR_INVALID ||
    $cfd->validstatus_folio == CFDR_INVALID)
  {
    return CFDR_INVALID;
  }
  else
    return '?';
}

/**
 * Saves an entry to {cfdr_fail}
 * @return If the record insert or update failed, returns FALSE.
 *  If it succeeded, returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function cfdr_save_fail($uri) {
  $record = array('xml_filename' => $uri);
  return drupal_write_record('cfdr_fail', $record);
}

/**
 * callback for 'cdfr/fail'
 */
function cfdr_view_fail() {
  drupal_add_css('tr.odd:hover,tr.even:hover  {background: #dbe5f1}', array('type' => 'inline'));
  $fail_dir = variable_get('cfdr_fail_path', 'sites/default/cfd/fail'); // move failed (non-CFD) XMLs to this dir
  $header = array(
    'Ver',
    "Archivo - $fail_dir/",
  );
  // $query = db_query('SELECT xml_filename from {cfdr_fail}');
  $query = db_select('cfdr_fail', 'cf')->fields('cf')->orderBy('id', 'DESC');
  $query = $query->extend('PagerDefault')->limit(50);
  $results = $query->execute();

  $rows = array();
  foreach ($results as $file) {
    $rows[] = array(
        l('Ver', "cfdr/fail/$file->id/txt", array('attributes' => array('target'=>'_blank'))) . ' | ' .
          l('dl', "cfdr/fail/$file->id/dl", array('attributes' => array('target'=>'_blank'))),
        str_replace($fail_dir.'/', '', $file->xml_filename),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('None available.'))) .
    theme('pager', array('tags' => array()));
}

function cfdr_fail_filename_load($fail_id) {
  return db_query('SELECT xml_filename from {cfdr_fail} WHERE id=?', array($fail_id))->fetchField();
}

/**
 * Implementaion of hook_cron_queue_info()
 * Defines two queues for processing (importing to DB) of CFDs and failed XMLs
 */
function cfdr_cron_queue_info() {
  $queues['cfdr_in'] = array(
    'worker callback' => 'cfdr_import_cfd', // The argument is the data passed to DrupalQueue::createItem()
    'time' => 60,
  );
  $queues['cfdr_fail'] = array(
    'worker callback' => 'cfdr_import_fail',
  );
  return $queues;
}

/*
 * Implementation of hook_cron().
 * Adds CFDs and failed XMLs to two separte queues for processing
 */
function cfdr_cron() {
  $scan_path = variable_get('cfdr_scan_path', 'sites/default/cfd/new'); // new XMLs directory

  $cfdr_inQueue   = DrupalQueue::get('cfdr_in');
  $cfdr_failQueue = DrupalQueue::get('cfdr_fail');

  if ($files = file_scan_directory($scan_path, '/.*\.(xml|XML)$/')) {
    foreach ($files as $file) {
      if ($cfdr = cfdr_import_load_cfd($file->uri)) {
        $cfdr_inQueue->createItem($cfdr);
      }
      else {
        $cfdr_failQueue->createItem($file->uri);
      }
    }
  }
}

/**
 * Loads the CFD data from a file.
 * Reads file in $uri and returns a $cfdr object with the data.
 * NOTE: $cfdr->xml_filename = $uri
 * (this code used to be in cfdr_insert)
 * @param $uri filename of the file ot read (relative to drupal's root)
 * @return stdObject a cfdr object which can be insterted by cfdr_save()
 *  or FALSE if $uri doesn't point to a CFD
 */
function cfdr_import_load_cfd($uri) {
  //parse XML file read (with DOM XML(simpleXML sucks at namespaces))
  $doc = new DOMDocument();
  @$doc->load($uri, LIBXML_NOWARNING);
  $xpath = new DOMXPath($doc);
  $cfdr = new stdClass();
  
  //TODO update for 2012 rules
  // if we're dealing with CFD (and not CFDi)
  if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/2')) {
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/2');
    switch ($xpath->query('/cfd:Comprobante/@version')->item(0)->value) {
      case '2.0':
        $cfdr->xml_type = CFDR_XML_2;
        break;
      case '2.2':
        $cfdr->xml_type = CFDR_XML_22;
        break;
      default:
        return FALSE;
    }
  }
  else if ($doc->isDefaultNamespace('http://www.sat.gob.mx/cfd/3') || $doc->lookupPrefix('http://www.sat.gob.mx/cfd/3') == 'cfdi') {
    $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/3');
    $xpath->registerNamespace('tfd', 'http://www.sat.gob.mx/TimbreFiscalDigital');
    $cfdr->uuid               = $xpath->query('//tfd:TimbreFiscalDigital/@UUID')->item(0)->value;
    $cfdr->no_certificado_sat = $xpath->query('//tfd:TimbreFiscalDigital/@noCertificadoSAT')->item(0)->value;
    switch ($xpath->query('/cfd:Comprobante/@version')->item(0)->value) {
      case '3.0':
        $cfdr->xml_type = CFDR_XML_3;
        break;
      case '3.2':
        $cfdr->xml_type = CFDR_XML_32;
        break;
      default:
        return FALSE;
    }
  }
  //I don't want any errors if it's not a CFD
  $fecha_cfd = $xpath->query('/cfd:Comprobante/@fecha');
  // abort if not on a CFD or CFDI
  if (!$fecha_cfd->length) return FALSE;
  $cfdr->fecha_cfd       = $fecha_cfd->item(0)->value;
  $cfdr->serie           = $xpath->query('/cfd:Comprobante/@serie')->item(0)->value;
  $cfdr->folio           = $xpath->query('/cfd:Comprobante/@folio')->item(0)->value;
  $cfdr->no_aprobacion   = $xpath->query('/cfd:Comprobante/@noAprobacion')->item(0)->value;
  $cfdr->ano_aprobacion  = $xpath->query('/cfd:Comprobante/@anoAprobacion')->item(0)->value;
  $cfdr->emisor_rfc      = $xpath->query('/cfd:Comprobante/cfd:Emisor/@rfc')->item(0)->value;
  $cfdr->emisor_nombre   = $xpath->query('/cfd:Comprobante/cfd:Emisor/@nombre')->item(0)->value;
  $cfdr->receptor_rfc    = $xpath->query('/cfd:Comprobante/cfd:Receptor/@rfc')->item(0)->value;
  $cfdr->importe         = $xpath->query('/cfd:Comprobante/@total')->item(0)->value;
  $cfdr->no_certificado  = $xpath->query('/cfd:Comprobante/@noCertificado')->item(0)->value;
  $cfdr_type             = $xpath->query('/cfd:Comprobante/@tipoDeComprobante')->item(0)->value;
  $cfdr->xml_filename    = $uri;

  switch ($cfdr_type) {
    case 'ingreso':
      $cfdr->cfd_type = CFDR_INGRESO;
    break;
    case 'egreso':
      $cfdr->cfd_type = CFDR_EGRESO;
    break;
    case 'traslado':
      $cfdr->cfd_type = CFDR_TRASLADO;
    break;
  }

  return $cfdr;
}

/**
 * Pair of functions for currying
 * USED in cfdr_import_cfd to tokenize the cfd's date
 */
function _cfdr_curry($func, $arity) {
  return create_function('', "
    \$args = func_get_args();
    if(count(\$args) >= $arity)
      return call_user_func_array('$func', \$args);
    \$args = var_export(\$args, 1);
    return create_function('','
      \$a = func_get_args();
      \$z = ' . \$args . ';
      \$a = array_merge(\$z,\$a);
      return call_user_func_array(\'$func\', \$a);
    ');
  ");
}
// Curried function
function _cfdr_on_match($fecha, $matches) {
  return date_format($fecha, $matches[2]); 
}

/**
 * Worker function to import CFDs into {cfdr} table.
 * Also adjusts $cfd->xml_filename and moves the CFD
 */
function cfdr_import_cfd($cfdr) {
  //error variablse
  $error_vars = array(
    '%file'     => $cfdr->xml_filename,
    '%type'     => _cfdr_xml_type_to_str($cfdr->xml_type),
    '%serie'    => $cfdr->serie,
    '%folio'    => $cfdr->folio,
  );
  $move_to = variable_get('cfdr_move_path', 'sites/default/cfd/received'); //base directory
  $to_dir  = variable_get('cfdr_move_pattern', '[cfdr:receptor_rfc]/[cfdr:emisor_rfc]/[cfdr_date:Y-m]');

  // Replace tokens
  // Replace date pattern (regex based on token_scan)
  // currying "magic"
  $callback = _cfdr_curry(_cfdr_on_match, 2);
  $fecha = new DateTime($cfdr->fecha_cfd);
  $to_dir = preg_replace_callback('/\[(cfdr_date):([^\[\]]*)\]/x', $callback($fecha), token_replace($to_dir, array('cfdr'=>$cfdr)));

  // prepare directory where to move the files
  $move_dir = "$move_to/$to_dir";

  if (!is_dir($move_dir)) {
    if (file_prepare_directory($move_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS))
      file_create_htaccess($move_dir);
  }

  $new_filename = $move_dir . '/' . basename($cfdr->xml_filename);
  if ($resulting_fileuri = file_unmanaged_move($cfdr->xml_filename, $new_filename)) {
    $cfdr->xml_filename = $resulting_fileuri;
    if (!cfdr_save($cfdr))
      watchdog('cfdr','Problema gurandando %new_file a la base de datos.<br/>%type: %serie %folio' , $error_vars, WATCHDOG_ERROR);
  }
  else {
    watchdog('cfdr', 'Problema moviendo %file a %new_file.<br/>%type: %serie %folio', array_merge($error_vars, array('%new_file' => $new_filename)), WATCHDOG_ERROR);
  }
}

/**
 * Worker function to import failed XMLs into {cfdr_fail} table.
 * Also moves the file
 */
function cfdr_import_fail($filename) {
  // watchdog('debug_fail', $filename);
  $fail_dir = variable_get('cfdr_fail_path', 'sites/default/cfd/fail'); // move failed (non-CFD) XMLs to this dir

  if (!is_dir($fail_dir)) {
    if (file_prepare_directory($fail_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS))
      file_create_htaccess($fail_dir);
  }

  $new_filename = $fail_dir . '/' . basename($filename);

  if (file_unmanaged_move($filename, $new_filename)) {
    if (!cfdr_save_fail($new_filename)) {
      watchdog('cfdr', 'Error al instertar archivo XML %new_file', array('%new_file' => $new_filename), WATCHDOG_WARNING);
    }
  }
  else {
    watchdog('cfdr', 'Error al mover archivo XML %file a %new_file', array('%file' => $filename, '%new_file' => $new_filename), WATCHDOG_WARNING);
  }
}

/**
 * 
 */
function cfdr_validate($cfdr) {
  $xml_type = _cfdr_xml_type_to_str($cfdr->xml_type);
  $struct_sello = cfd_validate_schema_sello($cfdr->xml_filename);
  if ($xml_type == 'CFD') {
    $cfdr->validstatus_xml   = $struct_sello[0];
    $cfdr->validstatus_sello = $struct_sello[1];
    $cfdr->validstatus_cert  = cfd_validate_cert($cfdr->no_certificado, $cfdr->emisor_rfc, $cfdr->fecha_cfd);
    $cfdr->validstatus_folio = cfd_validate_folio($cfdr->serie, $cfdr->folio, $cfdr->no_aprobacion, $cfdr->ano_aprobacion, $cfdr->emisor_rfc);
  }
  elseif ($xml_type = 'CFDI') {
    $cfdr->validstatus_xml   = $struct_sello[0];
    $cfdr->validstatus_sello = $struct_sello[1];
    $cfdr->validstatus_cert  = cfd_validate_cert($cfdr->no_certificado, $cfdr->emisor_rfc, $cfdr->fecha_cfd);
    $cfdr->validstatus_folio = cfd_validate_tfd($cfdr->xml_filename);

  }
  drupal_write_record('cfdr', $cfdr, 'cfdr_id');
  drupal_set_message("Se valido $xml_type: $cfdr->serie $cfdr->folio");
  drupal_goto(isset($_GET['destination']) ? $_GET['destination'] : "cfdr/$cfdr->cfdr_id/d");
}

/**
 * 
 */
function cfdr_validate_remote_single($cfdr) {
  $xml_type = _cfdr_xml_type_to_str($cfdr->xml_type);
  if ($xml_type == 'CFD') {
    $xml = _cfd_generate_multi_request_xml(array((array) $cfdr));
    $raw_response = _cfd_sat_soap_request($xml);
    $response = _cfd_parse_sat_soap_response($raw_response);
    // dpm($xml);
    // dpm($raw_response);
    // dpm($response);
    $validstatus_entry = array(
      'cfdr_id' => $cfdr->cfdr_id,
      'validstatus_sat' => $response[1],
    );
    drupal_write_record('cfdr', $validstatus_entry, 'cfdr_id');
    drupal_set_message("Se valido $xml_type: $cfdr->serie $cfdr->folio con el servicio del SAT");
    drupal_goto("cfdr/$cfdr->cfdr_id/d");
  }
}

/**
 * callback for cfdr/ajax/validate
 */
function _cfdr_validate_ajax($cfdr) {
  $cfdr_id    = $_POST['cfdr_id'];
  if (!(is_numeric($cfdr_id))) // if either is not numeric
    drupal_add_http_header('Status', '400 Bad Request', FALSE);
  else { //both are numeric
    $cfdr = cfdr_load($cfdr_id);
    $xml_type = _cfdr_xml_type_to_str($cfdr->xml_type);
    $struct_sello = cfd_validate_schema_sello($cfdr->xml_filename);
    if ($xml_type == 'CFD') {
      $cfdr->validstatus_xml   = $struct_sello[0];
      $cfdr->validstatus_sello = $struct_sello[1];
      $cfdr->validstatus_cert  = cfd_validate_cert($cfdr->no_certificado, $cfdr->emisor_rfc, $cfdr->fecha_cfd);
      $cfdr->validstatus_folio = cfd_validate_folio($cfdr->serie, $cfdr->folio, $cfdr->no_aprobacion, $cfdr->ano_aprobacion, $cfdr->emisor_rfc);
    }
    elseif ($xml_type = 'CFDI') {
      $cfdr->validstatus_xml   = $struct_sello[0];
      $cfdr->validstatus_sello = $struct_sello[1];
      $cfdr->validstatus_cert  = cfd_validate_cert($cfdr->no_certificado, $cfdr->emisor_rfc, $cfdr->fecha_cfd);
      $cfdr->validstatus_folio = cfd_validate_tfd($cfdr->xml_filename);
    }
    drupal_write_record('cfdr', $cfdr, 'cfdr_id');
    // drupal_add_http_header('Content-Type', 'text/plain', FALSE);
    return ajax_deliver(cfdr_validstatus_image(cfdr_validstatus_overview($cfdr)));
  }
}
